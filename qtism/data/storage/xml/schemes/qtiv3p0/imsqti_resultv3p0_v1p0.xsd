<?xml version = "1.0" encoding = "UTF-8"?>
<xs:schema xmlns="http://www.imsglobal.org/xsd/imsqti_result_v3p0"
     targetNamespace="http://www.imsglobal.org/xsd/imsqti_result_v3p0"
     xmlns:xs="http://www.w3.org/2001/XMLSchema"
     version="1EDTECH QTI RESULT REPORT 3.0.0"
     elementFormDefault="qualified"
     attributeFormDefault="unqualified">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="../w3/xml.xsd" />

    <xs:annotation>
        <xs:documentation>
            XSD Data File Information
            =========================
            Author:         Colin Smythe (1EdTech, UK) and Tom Hoffmann (1EdTech, USA)
            Date:           1st November, 2022
            Version:        2.0
            Status:         Candidate Final Public
            Description:    This is the Platform Specific Model of the AssessmentResult object in the 1EdTech QTI 3.0 Specification Information Model. It is this representation that is used to produce the XSD binding for the 1EdTech QTI Result Report 3.0.

            History:        This version supersedes the full 1EdTech QTI Results Report v2.2 specification.

            License:        IPR and Distribution Notices

                            This machine readable file is derived from the 1EdTech Question and Test Interoperability (QTI) Results Report Version 3.0
                            found at http://www.1edtech.org/question and the original 1EdTech schema binding or code base
                            http://www.1edtech.org/question.

                            Recipients of this document are requested to submit, with their comments, notification of any relevant
                            patent claims or other intellectual property rights of which they may be aware that might be infringed by
                            any implementation of the specification set forth in this document, and to provide supporting documentation.

                            1EdTech takes no position regarding the validity or scope of any intellectual property or other rights that might
                            be claimed to pertain to the implementation or use of the technology described in this document or the extent
                            to which any license under such rights might or might not be available; neither does it represent that it has
                            made any effort to identify any such rights. Information on 1EdTech procedures with respect to rights in 1EdTech
                            specifications can be found at the 1EdTech Intellectual Property Rights web page: http://www.1edtech.org/ipr/imsipr_policyFinal.pdf.

                            Copyright (c) 1EdTech Consortium 1999-2022. All Rights Reserved.

                            Use of this specification to develop products or services is governed by the license with 1EdTech found on the 1EdTech website: http://www.1edtech.org/license.html.

                            Permission is granted to all parties to use excerpts from this document as needed in producing requests for proposals.

                            The limited permissions granted above are perpetual and will not be revoked by 1EdTech or its successors or assigns.

                            THIS SPECIFICATION IS BEING OFFERED WITHOUT ANY WARRANTY WHATSOEVER, AND IN PARTICULAR, ANY WARRANTY OF NONINFRINGEMENT IS
                            EXPRESSLY DISCLAIMED. ANY USE OF THIS SPECIFICATION SHALL BE MADE ENTIRELY AT THE IMPLEMENTERS OWN RISK, AND NEITHER THE CONSORTIUM
                            NOR ANY OF ITS MEMBERS OR SUBMITTERS, SHALL HAVE ANY LIABILITY WHATSOEVER TO ANY IMPLEMENTER OR THIRD PARTY FOR ANY DAMAGES OF
                            ANY NATURE WHATSOEVER, DIRECTLY OR INDIRECTLY, ARISING FROM THE USE OF THIS SPECIFICATION.

            Source UML File Information
            ===========================
            The source file information must be supplied as an XMI file (without diagram layout information).
            The supported UML authoring tools are:
            (a) Poseidon - v6 (and later)
            (b) Papyrus - v1.1.3 (and later)

            Source XSLT File Information
            ============================
            XSL Generator:    Specificationv1p0_GenerationToolv1.xsl
            XSLT Processor:   Saxon
            Release:          1.0
            Date:             31st October, 2022
            Autogen Engineer: Colin Smythe (1EdTech, UK)
            Autogen Date:     2022-10-25

            1EdTech Auto-generation Binding Tool-kit (E-BAT)
            ================================================
            This file was auto-generated using the 1EdTech Binding Auto-generation Tool-kit (E-BAT).  While every
            attempt has been made to ensure that this tool auto-generates the files correctly, users should be aware
            that this is an experimental tool.  Permission is given to make use of this tool.  1EdTech makes no
            claim on the materials created by third party users of this tool.  Details on how to use this tool
            are contained in the 1EdTech "E-BAT" documentation available at the 1EdTech web-site:
            http://www.1edtech.org.

            Tool Copyright:  2012-2022  (c) 1EdTech Consortium Inc.  All Rights Reserved.
        </xs:documentation>
    </xs:annotation>

    <!-- Generate Global Attributes (non-assigned) ******************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate Global Attributes *********************************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate Global List Types *********************************************************************** -->

    <xs:simpleType name="IdentifierListDType">
        <xs:restriction base="xs:NCName" />
    </xs:simpleType>

    <xs:simpleType name="ViewEnumDType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="author" />
            <xs:enumeration value="candidate" />
            <xs:enumeration value="proctor" />
            <xs:enumeration value="scorer" />
            <xs:enumeration value="testConstructor" />
            <xs:enumeration value="tutor" />
        </xs:restriction>
    </xs:simpleType>

    <!-- ================================================================================================== -->

    <!-- Generate Namespaced extension Group  ************************************************************* -->

    <xs:group name="grpStrict.any">
        <xs:annotation>
            <xs:documentation>
                Any namespaced element from any namespace, other than the target namespace, may be included within an "any" element.
                The namespace for the imported element must be defined in the instance, and the schema must be imported.
                The extension has a definition of "strict" i.e. they must have their own namespace.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:any namespace = "##other" processContents = "strict" minOccurs = "0" maxOccurs = "unbounded" />
        </xs:sequence>
    </xs:group>

    <!-- ================================================================================================== -->

    <!-- Generate Special DataTypes  ********************************************************************** -->

    <xs:complexType name="EmptyPrimitiveTypeDType">
        <xs:complexContent>
            <xs:restriction base="xs:anyType" />
        </xs:complexContent>
    </xs:complexType>

    <!-- ================================================================================================== -->

    <!-- Generate the enumerated simpleType declarations ************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Parameter) ***************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Derived) ******************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Union) ********************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the simpleType elements based on IMS data-types (Complex) ******************************* -->

    <!-- ================================================================================================== -->

    <!-- Generate the derived data-type elements based upon simpleType ************************************ -->

    <xs:simpleType name="DateTimeDType">
        <xs:restriction base="xs:dateTime">
            <xs:pattern value="[0-9]{4}.*" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="IdentifierDType">
        <xs:restriction base="xs:NCName" />
    </xs:simpleType>

    <xs:simpleType name="UniqueIdentifierRefDType">
        <xs:restriction base="xs:NCName" />
    </xs:simpleType>

    <!-- ================================================================================================== -->

    <!-- Generate the derived data-type elements based upon derived simpleType **************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the ComplexTypes ************************************************************************ -->

    <xs:complexType name="AssessmentResultDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                This is the root class to contain the assessment result data. An Assessment Result is used
                to report the results of a candidate's interaction with a test and/or one or more items a-
                ttempted. Information about the test is optional, in some systems it may be possible to i-
                nteract with items that are not organized into a test at all. For example, items that are
                organized with learning resources and presented individually in a formative context.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="context" type="ContextDType" minOccurs="1" maxOccurs="1" />
            <xs:element name="testResult" type="TestResultDType" minOccurs="0" maxOccurs="1" />
            <xs:element name="itemResult" type="ItemResultDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CandidateResponseDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The response given by the candidate.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="ValueDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="ContextDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                This is the context for the 'assessmentResult'. It provides the corresponding set of iden-
                tifiers.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="sessionIdentifier" type="SessionIdentifierDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="sourcedId" use="optional" type="IdentifierDType" />
    </xs:complexType>

    <xs:complexType name="ContextTemplateVariableDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Item result information related to a Template or a Context Variable.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="ValueDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="identifier" use="required" type="IdentifierDType" />
        <xs:attribute name="cardinality" use="required">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        An expression or itemVariable can either be single-valued or multi-valued. A multi-valued
                        expression (or variable) is called a container. A container contains a list of values, th-
                        is list may be empty in which case it is treated as NULL. All the values in a multiple or
                        ordered container are drawn from the same value set, however, containers may contain mult-
                        iple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value for a
                        container. A container with cardinality multiple and value [A,B,C] is equivalent to a sim-
                        ilar one with value [C,B,A] whereas these two values would be considered distinct for con-
                        tainers with cardinality ordered. When used as the value of a response variable this dist-
                        inction is typified by the difference between selecting choices in a multi-response multi-
                        -choice task and ranking choices in an order objects task. In the language of [ISO 11404]
                        a container with multiple cardinality is a "bag-type", a container with ordered cardinali-
                        ty is a "sequence-type" and a container with record cardinality is a "record-type". The r-
                        ecord container type is a special container that contains a set of independent values each
                        identified by its own identifier and having its own base-type. This specification does not
                        make use of the record type directly however it is provided to enable customInteractions
                        to manipulate more complex responses and customOperators to return more complex values, in
                        addition to the use for detailed information about numeric responses described in the str-
                        ingInteraction abstract class.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="multiple" />
                    <xs:enumeration value="ordered" />
                    <xs:enumeration value="record" />
                    <xs:enumeration value="single" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="baseType" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        A base-type is simply a description of a set of atomic values (atomic to this specificati-
                        on). Note that several of the baseTypes used to define the runtime data model have identi-
                        cal definitions to those of the basic data types used to define the values for attributes
                        in the specification itself. The use of an enumeration to define the set of baseTypes used
                        in the runtime model, as opposed to the use of classes with similar names, is designed to
                        help distinguish between these two distinct levels of modeling.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="boolean" />
                    <xs:enumeration value="directedPair" />
                    <xs:enumeration value="duration" />
                    <xs:enumeration value="file" />
                    <xs:enumeration value="float" />
                    <xs:enumeration value="identifier" />
                    <xs:enumeration value="integer" />
                    <xs:enumeration value="pair" />
                    <xs:enumeration value="point" />
                    <xs:enumeration value="string" />
                    <xs:enumeration value="uri" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="CorrectResponseDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The correct response may be output as part of the report if desired. Systems are not limi-
                ted to reporting correct responses declared in responseDeclarations. For example, a corre-
                ct response may be set by a templateRule or may simply have been suppressed from the decl-
                aration passed to the delivery engine e.g. for security.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="ValueDType" minOccurs="1" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="interpretation" use="optional" type="xs:string" />
    </xs:complexType>

    <xs:complexType name="ItemResultDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The result of an item session is reported with an itemResult. A report may contain multip-
                le results for the same instance of an item representing multiple attempts, progression t-
                hrough an adaptive item or even more detailed tracking. In these cases, each item result
                must have a different datestamp.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="responseVariable" type="ResponseVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="templateVariable" type="ContextTemplateVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="outcomeVariable" type="OutcomeVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="contextVariable" type="ContextTemplateVariableDType" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
            <xs:element name="candidateComment" type="xs:string" minOccurs="0" maxOccurs="1" />
            <xs:element name="support" type="SupportDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="identifier" use="required" type="IdentifierDType" />
        <xs:attribute name="sequenceIndex" use="optional" type="xs:integer" />
        <xs:attribute name="datestamp" use="required" type="DateTimeDType" />
        <xs:attribute name="sessionStatus" use="required">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        The session status is used to keep track of the status of the item variables in an item s-
                        ession.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="final" />
                    <xs:enumeration value="initial" />
                    <xs:enumeration value="pendingExternalScoring" />
                    <xs:enumeration value="pendingResponseProcessing" />
                    <xs:enumeration value="pendingSubmission" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="OutcomeInformationDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The container for the extensions to the Outcome Variables.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:group ref="grpStrict.any" />
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="OutcomeVariableDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Item result information related to an 'Outcome Variable'.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="value" type="ValueDType" minOccurs="0" maxOccurs="unbounded" />
            <xs:element name="outcomeInformation" type="OutcomeInformationDType" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="identifier" use="required" type="IdentifierDType" />
        <xs:attribute name="cardinality" use="required">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        An expression or itemVariable can either be single-valued or multi-valued. A multi-valued
                        expression (or variable) is called a container. A container contains a list of values, th-
                        is list may be empty in which case it is treated as NULL. All the values in a multiple or
                        ordered container are drawn from the same value set, however, containers may contain mult-
                        iple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value for a
                        container. A container with cardinality multiple and value [A,B,C] is equivalent to a sim-
                        ilar one with value [C,B,A] whereas these two values would be considered distinct for con-
                        tainers with cardinality ordered. When used as the value of a response variable this dist-
                        inction is typified by the difference between selecting choices in a multi-response multi-
                        -choice task and ranking choices in an order objects task. In the language of [ISO 11404]
                        a container with multiple cardinality is a "bag-type", a container with ordered cardinali-
                        ty is a "sequence-type" and a container with record cardinality is a "record-type". The r-
                        ecord container type is a special container that contains a set of independent values each
                        identified by its own identifier and having its own base-type. This specification does not
                        make use of the record type directly however it is provided to enable customInteractions
                        to manipulate more complex responses and customOperators to return more complex values, in
                        addition to the use for detailed information about numeric responses described in the str-
                        ingInteraction abstract class.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="multiple" />
                    <xs:enumeration value="ordered" />
                    <xs:enumeration value="record" />
                    <xs:enumeration value="single" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="baseType" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        A base-type is simply a description of a set of atomic values (atomic to this specificati-
                        on). Note that several of the baseTypes used to define the runtime data model have identi-
                        cal definitions to those of the basic data types used to define the values for attributes
                        in the specification itself. The use of an enumeration to define the set of baseTypes used
                        in the runtime model, as opposed to the use of classes with similar names, is designed to
                        help distinguish between these two distinct levels of modeling.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="boolean" />
                    <xs:enumeration value="directedPair" />
                    <xs:enumeration value="duration" />
                    <xs:enumeration value="file" />
                    <xs:enumeration value="float" />
                    <xs:enumeration value="identifier" />
                    <xs:enumeration value="integer" />
                    <xs:enumeration value="pair" />
                    <xs:enumeration value="point" />
                    <xs:enumeration value="string" />
                    <xs:enumeration value="uri" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="view" use="optional">
            <xs:simpleType>
                <xs:list itemType="ViewEnumDType" />
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="interpretation" use="optional" type="xs:string" />
        <xs:attribute name="longInterpretation" use="optional" type="xs:anyURI" />
        <xs:attribute name="normalMaximum" use="optional" type="xs:double" />
        <xs:attribute name="normalMinimum" use="optional" type="xs:double" />
        <xs:attribute name="masteryValue" use="optional" type="xs:double" />
        <xs:attribute name="external-scored" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        Identifies the set of modes for the external scoring of the Item.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="externalMachine" />
                    <xs:enumeration value="human" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="variable-identifier-ref" use="optional" type="UniqueIdentifierRefDType" />
    </xs:complexType>

    <xs:complexType name="ResponseVariableDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The Item result information related to a 'Response Variable'.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="correctResponse" type="CorrectResponseDType" minOccurs="0" maxOccurs="1" />
            <xs:element name="candidateResponse" type="CandidateResponseDType" minOccurs="1" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="identifier" use="required" type="IdentifierDType" />
        <xs:attribute name="cardinality" use="required">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        An expression or itemVariable can either be single-valued or multi-valued. A multi-valued
                        expression (or variable) is called a container. A container contains a list of values, th-
                        is list may be empty in which case it is treated as NULL. All the values in a multiple or
                        ordered container are drawn from the same value set, however, containers may contain mult-
                        iple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value for a
                        container. A container with cardinality multiple and value [A,B,C] is equivalent to a sim-
                        ilar one with value [C,B,A] whereas these two values would be considered distinct for con-
                        tainers with cardinality ordered. When used as the value of a response variable this dist-
                        inction is typified by the difference between selecting choices in a multi-response multi-
                        -choice task and ranking choices in an order objects task. In the language of [ISO 11404]
                        a container with multiple cardinality is a "bag-type", a container with ordered cardinali-
                        ty is a "sequence-type" and a container with record cardinality is a "record-type". The r-
                        ecord container type is a special container that contains a set of independent values each
                        identified by its own identifier and having its own base-type. This specification does not
                        make use of the record type directly however it is provided to enable customInteractions
                        to manipulate more complex responses and customOperators to return more complex values, in
                        addition to the use for detailed information about numeric responses described in the str-
                        ingInteraction abstract class.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="multiple" />
                    <xs:enumeration value="ordered" />
                    <xs:enumeration value="record" />
                    <xs:enumeration value="single" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="baseType" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        A base-type is simply a description of a set of atomic values (atomic to this specificati-
                        on). Note that several of the baseTypes used to define the runtime data model have identi-
                        cal definitions to those of the basic data types used to define the values for attributes
                        in the specification itself. The use of an enumeration to define the set of baseTypes used
                        in the runtime model, as opposed to the use of classes with similar names, is designed to
                        help distinguish between these two distinct levels of modeling.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="boolean" />
                    <xs:enumeration value="directedPair" />
                    <xs:enumeration value="duration" />
                    <xs:enumeration value="file" />
                    <xs:enumeration value="float" />
                    <xs:enumeration value="identifier" />
                    <xs:enumeration value="integer" />
                    <xs:enumeration value="pair" />
                    <xs:enumeration value="point" />
                    <xs:enumeration value="string" />
                    <xs:enumeration value="uri" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="choiceSequence" use="optional">
            <xs:simpleType>
                <xs:list itemType="IdentifierListDType" />
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="scoreStatus" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        This is the set of permitted values for the 'scoreStatus' attribute for the ItemResult cl-
                        ass.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="notscored" />
                    <xs:enumeration value="scored" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="answeredStatus" use="optional">
            <xs:simpleType>
                <xs:annotation>
                    <xs:documentation source="documentation">
                        This is the definition for the set of permitted values for the 'answeredStatus' attribute
                        for the 'ItemResult' class.
                    </xs:documentation>
                </xs:annotation>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="notpresented" />
                    <xs:enumeration value="presented" />
                    <xs:enumeration value="attempted" />
                    <xs:enumeration value="answered" />
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="TestResultDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The container for the Test result. When a test result is given the following item results
                must relate only to items that were selected for presentation as part of the corresponding
                test session. Furthermore, all items selected for presentation should be reported with a
                corresponding itemResult.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
                <xs:element name="responseVariable" type="ResponseVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="templateVariable" type="ContextTemplateVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="outcomeVariable" type="OutcomeVariableDType" minOccurs="1" maxOccurs="1"/>
                <xs:element name="contextVariable" type="ContextTemplateVariableDType" minOccurs="1" maxOccurs="1"/>
            </xs:choice>
            <xs:element name="support" type="SupportDType" minOccurs="0" maxOccurs="unbounded" />
        </xs:sequence>
        <xs:attribute name="identifier" use="required" type="IdentifierDType" />
        <xs:attribute name="datestamp" use="required" type="DateTimeDType" />
    </xs:complexType>

    <!-- ================================================================================================== -->

    <!-- Generate the SOAP Binding ComplexTypes *********************************************************** -->

    <!-- ================================================================================================== -->

    <!-- Generate the derived ComplexTypes **************************************************************** -->

    <xs:complexType name="SessionIdentifierDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                The system that creates the result (for example, the test delivery system) should assign a
                session identifier that it can use to identify the session.
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="EmptyPrimitiveTypeDType">
                <xs:attribute name="sourceID" use="required" type="xs:anyURI" />
                <xs:attribute name="identifier" use="required" type="IdentifierDType" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="SupportDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                This is the container for the definition of an associated support feature. These features
                are aligned to the QTI profile of the 1EdTech Access for All Personal Needs and Preferenc-
                es (AfA PNP).
            </xs:documentation>
        </xs:annotation>
        <xs:complexContent>
            <xs:extension base="EmptyPrimitiveTypeDType">
                <xs:attribute name="name" use="required" type="xs:NCName" />
                <xs:attribute name="assignment" use="required">
                    <xs:simpleType>
                        <xs:annotation>
                            <xs:documentation source="documentation">
                                The permitted set of values for the scoping of a support feature.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="assigned" />
                            <xs:enumeration value="universal" />
                            <xs:enumeration value="prohibited" />
                            <xs:enumeration value="inherit" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="value" use="optional" type="xs:normalizedString" />
                <xs:attribute ref="xml:lang" use="optional" />
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ValueDType" abstract="false" mixed="false">
        <xs:annotation>
            <xs:documentation source="documentation">
                A class that can represent a single value of any baseType in variable declarations and re-
                sult reports. The base-type is defined by the baseType attribute of the declaration except
                in the case of variables with record cardinality.
            </xs:documentation>
        </xs:annotation>
        <xs:simpleContent>
            <xs:extension base="xs:normalizedString">
                <xs:attribute name="fieldIdentifier" use="optional" type="IdentifierDType" />
                <xs:attribute name="baseType" use="optional">
                    <xs:simpleType>
                        <xs:annotation>
                            <xs:documentation source="documentation">
                                A base-type is simply a description of a set of atomic values (atomic to this specificati-
                                on). Note that several of the baseTypes used to define the runtime data model have identi-
                                cal definitions to those of the basic data types used to define the values for attributes
                                in the specification itself. The use of an enumeration to define the set of baseTypes used
                                in the runtime model, as opposed to the use of classes with similar names, is designed to
                                help distinguish between these two distinct levels of modeling.
                            </xs:documentation>
                        </xs:annotation>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="boolean" />
                            <xs:enumeration value="directedPair" />
                            <xs:enumeration value="duration" />
                            <xs:enumeration value="file" />
                            <xs:enumeration value="float" />
                            <xs:enumeration value="identifier" />
                            <xs:enumeration value="integer" />
                            <xs:enumeration value="pair" />
                            <xs:enumeration value="point" />
                            <xs:enumeration value="string" />
                            <xs:enumeration value="uri" />
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <!-- ================================================================================================== -->

    <!-- Declaration of the elements (Complex) ************************************************************ -->

    <!-- ================================================================================================== -->

    <!-- Declaration of the elements (Derived) ************************************************************ -->

    <!-- ================================================================================================== -->

    <!-- Declaration of the root element(s) *************************************************************** -->

    <xs:element name="assessmentResult" type="AssessmentResultDType" />

    <!-- ================================================================================================== -->

</xs:schema>
